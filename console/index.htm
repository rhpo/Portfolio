<!DOCTYPE html>
<script src="https://code.jquery.com/jquery-3.6.0.slim.min.js" crossorigin="anonymous"></script>
<style>
    .c {
        resize:   none;
        overflow: none;
        background-color: black;
        color: chartreuse;
        width:  100%;
        height: 100vh;
        margin: 0;
        top:    0;
        left:   0;
        border: none;
        font-family: Consolas, monaco, monospace;
        font-size: 17px;
        padding:   05px;
        caret-color: white;
        outline-style: none;
        box-shadow:    none;
        border-color:  transparent;
    }

    body {
        background-color: black;
        margin: 0; top: 0; left: 0; 
    }
</style>

<head>
    <title>Ramy's Console</title>
</head>

<body>
    <textarea 
        name="c" 
        id="c" 
        class="c" 
        spellcheck="false">
    </textarea>
</body>
<script src="https://code.jquery.com/jquery-3.6.0.slim.min.js"></script>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    var c = document.getElementById('c');

    var user_ip = '';
    var al = ["*"];
    var lastexp = "No last JS Exceptions found!";
    var last_position = 0;
    var readline = !true;
    var readline_result = "";

    $("#c").bind("keydown click focus", function (event) { // initialise the cadet position changed event
        var line = c.value.split('\n')[c.value.split('\n').length - 1];
        var before_chars = c.value.length; 
        var __t = getCursorPosition(c);
    });
    function cursor_changed(element) {
        var new_position = getCursorPosition(element);
        if (new_position !== last_position) {
            last_position = new_position;
            return true;
        }
        return false;
    }
    function removeAt (array, index) {
        return array.filter((_, idx) => idx !== index)
    }
    function getCursorPosition(element) {
        var el = $(element).get(0);
        var pos = 0;
        if ('selectionStart' in el) {
            pos = el.selectionStart;
        } else if ('selection' in document) {
            el.focus();
            var Sel = document.selection.createRange();
            var SelLength = document.selection.createRange().text.length;
            Sel.moveStart('character', -el.value.length);
            pos = Sel.text.length - SelLength;
        }
        return pos;
    }
    fetch("https://www.wtfismyip.com/text").then(_ => _.text()).then(__ => (user_ip = __));
    user_ip = user_ip.substring(0, user_ip.length - 1);
    function ranInt(m, x) {
        return Math.floor(Math.random() * (x - m + 1)) + m;
    }
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    var usr = (`user${ranInt(100, 999)}`);
    var e = usr + ":~# ";
    c.value = e;
    user_ip = user_ip.substring(0, user_ip.length - 1);
    c.addEventListener("keypress", function (event) {
        c.scrollTop = c.scrollWidth;

        var includes = false;

        if (al[0] === '*' && al.length === 1) {
            includes = true;
        } else {
            al.forEach(key => {
                if (event.key === key)
                    includes = !includes;
            });
        }
        if (includes) {
            switch (event.key) {
                case "Enter":
                    if (readline) {
                        readline_result = $('#c').val().split('\n')[$('#c').val().split('\n').length-1];
                        readline = false;
                        return terminal.reset();
                    }
                    event.preventDefault();
                    var terminalText = $('#c').val();
                    var terminalLines = terminalText.split('\n');
                    var keys = Object.keys(terminalLines);
                    var last = keys[keys.length - 1];
                    var s = terminalLines[last].slice(e.length);
                    main(s);
                    break;
            }
        } else {
            return event.preventDefault();
        }
    });
    c.addEventListener("keydown", function (event) {
        var line = c.value.split('\n')[c.value.split('\n').length - 1];
            var before_chars = c.value.length; 
            var __t = getCursorPosition(c);
        if (event.keyCode === 8) {
            if (__t <= before_chars - line.length + e.length) {
                event.preventDefault();
            }
        } else {
            if (__t < before_chars - line.length + e.length) {
                event.preventDefault();
            }
        }
    });

    async function main(t = '') {
        while (t.includes('  ') || t.includes("   ")) {
            t = t.replace("  ", ' ').replace("   ", " ");
        }
        while (t.startsWith(" ")) {
            t = t.slice(1);
        }
        while (t.endsWith(" ")) {
            t = t.substring(0, t.length - 1);
        }
        t = t.replaceAll("|href|", window.location.href)
            .replaceAll("|user|", usr)
            .replaceAll('|time|', `${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}`)
            .replaceAll("|ip|", user_ip.endsWith("\n") ? user_ip.substring(0, user_ip.length - 1) : user_ip)
            .replaceAll("|newline|", "\n");
        var arg = t.split(" ");
        var element = arg[0];
        if (element === '') {
            return terminal.reset();
        }
        
        var tempArgArray=[];
        for (var i = 0; i < arg.length; i++) {
            var key = arg[i];
            if (key.startsWith('-')) {
                tempArgArray.push(key);
                arg = removeAt(arg, index);
            }
            if (key.startsWith('|') && key.endsWith('|')) {
                var nodeBetween = key.substring(0, key.length-1).substring(1, key.length-1);
                var variable = eval(nodeBetween);
                var whitelistDataTypes = ["function"];
                if (typeof variable in whitelistDataTypes) {
                    arg[i] = `function!${nodeBetween}`;
                } else {arg[i] = variable}
            }
        }
        system.stdin.args = tempArgArray;
        var cmd = arg[0];
        switch (cmd) {
            case "echo":
                terminal.printf(t.slice(5));
                break;
            case "whoami":
                terminal.printf(usr);
                break;
            case "refresh":
                window.location.href = window.location.href;
                break;
            case "clear":
            case "cls":
            case "reset":
                return terminal.change(e);
                break;
            case "figlet":
                if (arg.length < 2) {
                    return terminal.printf(`${cmd}: Please specify the 2nd argument.\nExample: figlet Hello, world!`);
                }
                terminal.allowOnly("");
                return fetch('https://api.codetabs.com/v1/proxy?quest=' + encodeURI("https://artii.herokuapp.com/make?text=" + arg.shift().join(" "))).then((response) => response.text()).then((text) => {
                    terminal.printf(text+"\n")
                    terminal.allowOnly("*");
                    terminal.reset();
                    });
                break;

            default:
                terminal.printf(cmd + ": Command not found.")
                break;

            case "terminal":
                if (arg.length < 2) {
                    return terminal.printf(`${cmd}: Please specify the 2nd argument.\nExample: terminal {Command}`);
                } else {
                    switch (arg[1]) {
                        case "rename":
                            if (arg.length < 3) {
                                terminal.printf(`${cmd}: Please specify the new Name.\nExample: terminal rename MyNewName`);
                            } else {
                                if (arg[2] === usr) {
                                    terminal.printf(`${cmd}: TypeError" The new Username is simillar to the current.`)
                                    return terminal.reset();
                                }
                                usr = arg[2];
                                e = usr + ":~# ";
                                terminal.setState(true);
                            }
                            break;
                        case "color":
                            if (arg.length < 3) {
                                terminal.printf(`${cmd}: Please specify a new terminal color (3rd argument not found!)`)
                            }
                            else {
                                $("#c").css("color", arg[2]);
                                terminal.setState(true)
                            }
                            break;
                        case "settings":
                            terminal.allowOnly("");
                            terminal.printf("(~) Loading settings...");
                            terminal.allowOnly("*");
                            break;
                        default:
                            terminal.printf("terminal: the command " + arg[1] + " doesn't exist.")
                            break;
                    }
                }
                break;
            case "lastexp":
                terminal.printf(`- Last SYS exception :\n${lastexp}`);
                break;
            case "sleeprint":
                if (arg.length < 3) {
                    terminal.printf(`${cmd}: please specify 3 args!`);
                    return terminal.reset();
                }
                try {
                    if (isNaN(arg[1]) || isNaN(arg[2])) {
                        throw new Error("Failed to parse args to Int.")
                    }
                    terminal.allowOnly("");
                    var sec = parseInt(arg[1]);
                    var times = parseInt(arg[2]);
                    var repeatIndex = 1;
                    for (repeatIndex; repeatIndex < times; repeatIndex++) {
                        await sleep(sec);
                        terminal.printf(repeatIndex.toString());
                    }
                    terminal.allowOnly("*");
                } catch (err) {
                    terminal.printf(`${cmd}: Unhandled Exception, use: 'lastexp' command to see the JS-SYS Error.`);
                    lastexp = err;
                }
                break;
            case "fetch":
            case "curl":
                if (arg.length < 2) {
                    terminal.printf(`${cmd}: Please specify the url to fetch/curl.`);
                    return terminal.reset();
                }
                terminal.allowOnly("");
                try {
                    var dots = ".";
                    while(true) {
                        await sleep(500);
                        terminal.removeLine(c.length);
                    }
                    fetch(arg[1]).then(_ => _.text()).then(res => terminal.printf(res + "\n" + e));
                    return terminal.allowOnly("*");
                } catch (err) {
                    terminal.allowOnly("*");
                    terminal.logLine(`${cmd}: failed to downloadString host '${arg[1]}'.\nJS ERR: ${err}`);
                }
                terminal.allowOnly("*")
        }
        terminal.reset();
    }

    window.onload = () => {
        document.getElementById("c").focus();
    }

    var terminal = new Object();
    terminal.log = function log(string = "") {
        c.value += string;
    }
    terminal.logLine = function log(string = "") {
        c.value += string + '\n';
    }
    terminal.printf = function lnLog(string = "") {
        c.value += "\n" + string;
        document.title = "Console | " + string;
        c.scrollTop = c.scrollHeight;
    }
    terminal.reset = function rst() {
        c.value += `\n${e}`;
    }
    terminal.change = function change(string = "") {
        c.value = string;
    }
    terminal.setState = (conditional) => { 
        terminal.printf(conditional === false ? 0 : 1) 
    }
    terminal.allowOnly = (arr) => {
        arr ?? "";
        al = arr.split('');
    }
    terminal.removeLine = (index) => {
        var main = "", lineArr = [];
        lineArr = c.value.split("\n");
        index ?? lineArr.length-1;
        index = parseInt(index);
        lineArr = removeAt(lineArr, index);
        main = lineArr.join("\n");
        terminal.change(main);
    }
    const add = (content = [], index = 0, _new = []) => {
            var past = [], futur = [];
            for (var i = 0; i < index; i++) {
                past.push(content[i]);
            }
            for (var j = index; j < content.length; j++) {
                futur.push(content[j]);
            }
            return [...past, _new, ...futur];
        }
    terminal.pushLine = (index, x) => {
        let lineArr = c.value.split("\n");
        lineArr = add(lineArr, parseInt(index), x);
        terminal.change(lineArr.join("\n"));
    }
    terminal.editLine = (index, val) => {
        terminal.removeLine(index);
        terminal.pushLine(index, val);
    }
    terminal.getSrc = async (src='') => {
        fetch('https://api.codetabs.com/v1/proxy?quest=' + src).then((response) => response.text()).then((text) => {return text});
    };
    terminal.readline = () => {
        e="";
        terminal.change(`${c.value}\n`);
        readline = true;
        while (true) {
            if (readline === false) {
                e=usr + ":~# ";
                return readline_result;
            }
        }
    };
    var system = new Object();
    system.stdin = new Object();
    system.stdin.params, system.stdin.args = [];
</script>