<!DOCTYPE html>
<script src="https://code.jquery.com/jquery-3.6.0.slim.min.js" crossorigin="anonymous"></script>
<style>
    .c {
        resize: none;
        overflow: none;
        background-color: black;
        color: chartreuse;
        width: 100%;
        height: 100vh;
        top: 0;
        left: 0;
        border: none;
        font-family: Consolas, monaco, monospace;
        font-size: 17px;
        caret-color: white;
        outline-style: none;
        box-shadow: none;
        border-color: transparent;
    }

    body {
        background-color: black;
    }
</style>

<head>
   <title>Ramy's Console</title>
</head>

<body>
    <textarea name="c" id="c" class="c" spellcheck="false"></textarea>
</body>
<script src="https://code.jquery.com/jquery-3.6.0.slim.min.js"></script>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>

    var user_ip='';
    var al = ["*"];
    var lastexp="No last JS Exceptions found!";


    fetch("https://www.wtfismyip.com/text").then(_=>_.text()).then(__=>(user_ip=__));
    user_ip = user_ip.substring(0, user_ip.length - 1);
    function ranInt(m, x) {
        return Math.floor(Math.random() * (x - m + 1)) + m;
    }
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    var usr = (`user${ranInt(1000, 9999)}`);
    var e = usr + ":~# ";
    _$("c").value = e;
    function _$(elm = '') {
        return document.getElementById(elm);
    }
    user_ip = user_ip.substring(0, user_ip.length - 1);
    _$('c').addEventListener("keypress", function (event) {
        var includes = false;
        if (al[0]==='*') {
            includes = true;
        } else {
            al.forEach(key => {
                if (event.key === key)
                includes = !includes;
            });
        }
        if (includes) {
            if (event.key === "Enter") {
                event.preventDefault();
                var terminalText = $('#c').val();
                var terminalLines = terminalText.split('\n');
                var keys = Object.keys(terminalLines);
                var last = keys[keys.length - 1];
                var s = terminalLines[last].slice(e.length);
                main(s);
            }
        } else {
            return event.preventDefault();
        }
    });
    _$('c').addEventListener("keydown", function (event) {
        if (event.keyCode === 8) {
            var terminalText = $('#c').val();
            var terminalLines = terminalText.split('\n');
            var intBeforeLastLine;
            terminalLines.forEach(element => {
                intBeforeLastLine += element.length;
            });
            var cursorPosition = $('#c').prop("selectionStart");
            cursorPosition -= intBeforeLastLine;
            if (cursorPosition <= e.length) {
                event.preventDefault();
            }
        }
    });


    async function main(t = '') {
        while (t.includes('  ') || t.includes("   ")) {
            t = t.replace("  ", ' ').replace("   ", " ");
        }
        while (t.startsWith(" ")) {
            t = t.slice(1);
        }
        var arg = t.split(" ");
        var element = arg[0];
        if (element === '') {
            return terminal.reset();
        }
        var cmd = arg[0];
        t = t.replace("|href|", window.location.href)
            .replace("|user|", usr)
            .replace('|time|', Date.now().toString())
            .replace("|ip|", user_ip.endsWith("\n")?user_ip.substring(0, user_ip.length - 1):user_ip)
            .replace("|newline|", "\n");
        switch (cmd) {
            case "echo":
                terminal.printf(t.slice(5))
                break;
            case "whoami":
                terminal.printf(usr);
                break;
                case "refresh":
                    window.location.href = window.location.href;
                    break;
                    case "clear":
                        case "cls":
                            case "reset":
                                return terminal.change(e);
                                break;
            default:
                terminal.printf(cmd + ": Command not found.")
                break;

            case "terminal":
                if (arg.length < 2) {
                    return terminal.printf(`${cmd}: Please specify the 2nd argument.\nExample: terminal {Command}`);
                } else {
                    switch (arg[1]) {
                        case "rename":
                            if (arg.length < 3) {
                                terminal.printf(`${cmd}: Please specify the new Name.\nExample: terminal rename MyNewName`);
                            } else {
                                if (arg[2]===usr) {
                                    terminal.printf(`${cmd}: TypeError" The new Username is simillar to the current.`)
                                    return terminal.reset();
                                }
                                usr=arg[2];
                                e = usr+":~# ";
                                terminal.setState(true);
                            }
                            break;
                        case "color":
                            if (arg.length < 3) {
                                terminal.printf(`${cmd}: Please specify a new terminal color (3rd argument not found!)`)
                            }
                            else {
                                $("#c").css("color", arg[2]);
                                terminal.setState(true)
                            }
                            break;
                            case "settings":
                                terminal.allowOnly("");
                                terminal.printf("(~) Loading settings...");
                                break;
                            default:
                                terminal.printf("terminal: the command " + arg[1] + "doesn't exist.")
                                break;
                    }
                }
                break;
                case "lastexp":
                    terminal.printf(`(~) Last SYS exception : ${lastexp}`);
                case "sleep":
                if (arg.length < 3) {
                    terminal.printf(`${cmd}: please specify 3 args!`);
                    return terminal.reset();
                }
                try {
                    terminal.allowOnly("");
                    var sec = parseInt(arg[0]);
                    var times = parseInt(arg[1]);
                    console.log(arg[0] + arg[1]);
                    var repeatIndex=1;
                    for (repeatIndex; repeatIndex<times; repeatIndex++) {
                        await sleep(sec);
                        terminal.printf(repeatIndex.toString());
                    }
                    terminal.allowOnly("*");
                } catch (err) {
                    terminal.printf(`${cmd}: Unhandled Exception, use: 'lastexp' command to see the JS-SYS Error.`);
                    lastexp=err;
                }
                break;
                case "fetch":
                    case "curl":
                    if (arg.length < 2) {
                        terminal.printf(`${cmd}: Please specify the url to fetch/curl.`);
                        return terminal.reset();
                    }
                    terminal.allowOnly("");
                    try {
                        fetch(arg[1]).then(_=>_.text()).then(res=>terminal.printf(res + "\n" + e));
                    } catch (err) {
                        terminal.logLine(`${cmd}: failed to downloadString host '${arg[1]}'.\nJS ERR: ${err}`);
                    }
                    terminal.allowOnly("*")
        }
        terminal.reset();
    }

    window.onload = () => {
        document.getElementById("c").focus();
    }

    var terminal = new Object();
    terminal.log = function log(string = "") {
        _$('c').value += string;
    }
    terminal.logLine = function log(string = "") {
        _$('c').value += string + '\n';
    }
    terminal.printf = function lnLog(string = "") {
        _$('c').value += "\n" + string;
        document.title = "Console | " + string;
        _$("c").scrollTop = _$("c").scrollHeight;
    }
    terminal.reset = function rst() {
        _$('c').value += `\n${e}`;
    }
    terminal.change = function change(string = "") {
        _$('c').value = string;
    }
    terminal.setState = (conditional) => { terminal.printf(conditional === false ? 0 : 1) }
    terminal.allowOnly = (arr) => {
        arr??"";
        al = arr.split('');
    }
</script>